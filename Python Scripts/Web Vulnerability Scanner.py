import requests
import re

# Function to check for SQL Injection vulnerability
def check_sql_injection(url):
    payload = "' OR '1'='1"
    response = requests.get(url + payload)
    
    # Look for a common SQL error in the response (e.g., MySQL error)
    if "error" in response.text.lower():
        print("[!] Potential SQL Injection vulnerability detected.")
    else:
        print("[+] No SQL Injection vulnerability found.")

# Function to check for Cross-Site Scripting (XSS) vulnerability
def check_xss(url):
    payload = "<script>alert('XSS')</script>"
    response = requests.get(url + payload)
    
    # Check if the payload appears in the response
    if payload in response.text:
        print("[!] Potential XSS vulnerability detected.")
    else:
        print("[+] No XSS vulnerability found.")

# Function to check for Directory Traversal vulnerability
def check_directory_traversal(url):
    payload = "../../../../etc/passwd"
    response = requests.get(url + payload)
    
    # Check for response that may indicate directory traversal (e.g., file contents)
    if "root" in response.text:
        print("[!] Potential Directory Traversal vulnerability detected.")
    else:
        print("[+] No Directory Traversal vulnerability found.")

# Main function to scan the website
def scan_website():
    print("Web Vulnerability Scanner")
    print("Created by Michael Tran")
    print("=" * 50)

    url = input("Enter the target URL (e.g., http://example.com): ").strip()

    # Ensure URL starts with http or https
    if not url.startswith("http://") and not url.startswith("https://"):
        print("[!] Please include 'http://' or 'https://' in the URL.")
        return

    print(f"\nScanning {url} for vulnerabilities...\n")

    check_sql_injection(url)
    check_xss(url)
    check_directory_traversal(url)

    print("=" * 50)

# User controls to scan again or exit
def user_controls():
    while True:
        choice = input("\nDo you want to scan another website? (y/n): ").strip().lower()
        if choice == 'y':
            return True  # Return True to allow another scan
        elif choice == 'n':
            print("Exiting the program.")
            return False  # Return False to exit the program
        else:
            print("Invalid input. Please enter 'y' for Yes or 'n' for No.")

# Main driver
def main():
    print("Web Vulnerability Scanner Tool")
    print("Created by Michael Tran")
    print("=" * 50)

    while True:
        scan_website()

        # Ask user if they want to scan again or exit
        if not user_controls():
            break

if __name__ == "__main__":
    main()
